// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	types "github.com/projecteru2/vmihub/internal/storage/types"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// ChunkWrite provides a mock function with given fields: ctx, name, transactionID, info
func (_m *Storage) ChunkWrite(ctx context.Context, name string, transactionID string, info *types.ChunkInfo) error {
	ret := _m.Called(ctx, name, transactionID, info)

	if len(ret) == 0 {
		panic("no return value specified for ChunkWrite")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *types.ChunkInfo) error); ok {
		r0 = rf(ctx, name, transactionID, info)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CompleteChunkWrite provides a mock function with given fields: ctx, name, transactionID, chunkList
func (_m *Storage) CompleteChunkWrite(ctx context.Context, name string, transactionID string, chunkList []*types.ChunkInfo) error {
	ret := _m.Called(ctx, name, transactionID, chunkList)

	if len(ret) == 0 {
		panic("no return value specified for CompleteChunkWrite")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []*types.ChunkInfo) error); ok {
		r0 = rf(ctx, name, transactionID, chunkList)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateChunkWrite provides a mock function with given fields: ctx, name
func (_m *Storage) CreateChunkWrite(ctx context.Context, name string) (string, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for CreateChunkWrite")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, name, ignoreNotExists
func (_m *Storage) Delete(ctx context.Context, name string, ignoreNotExists bool) error {
	ret := _m.Called(ctx, name, ignoreNotExists)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) error); ok {
		r0 = rf(ctx, name, ignoreNotExists)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, name
func (_m *Storage) Get(ctx context.Context, name string) (io.ReadCloser, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (io.ReadCloser, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) io.ReadCloser); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDigest provides a mock function with given fields: ctx, name
func (_m *Storage) GetDigest(ctx context.Context, name string) (string, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetDigest")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSize provides a mock function with given fields: ctx, name
func (_m *Storage) GetSize(ctx context.Context, name string) (int64, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetSize")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Move provides a mock function with given fields: ctx, src, dest
func (_m *Storage) Move(ctx context.Context, src string, dest string) error {
	ret := _m.Called(ctx, src, dest)

	if len(ret) == 0 {
		panic("no return value specified for Move")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, src, dest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Put provides a mock function with given fields: ctx, name, digest, in
func (_m *Storage) Put(ctx context.Context, name string, digest string, in io.ReadSeeker) error {
	ret := _m.Called(ctx, name, digest, in)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.ReadSeeker) error); ok {
		r0 = rf(ctx, name, digest, in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PutWithChunk provides a mock function with given fields: ctx, name, digest, size, chunkSize, in
func (_m *Storage) PutWithChunk(ctx context.Context, name string, digest string, size int, chunkSize int, in io.ReaderAt) error {
	ret := _m.Called(ctx, name, digest, size, chunkSize, in)

	if len(ret) == 0 {
		panic("no return value specified for PutWithChunk")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, int, io.ReaderAt) error); ok {
		r0 = rf(ctx, name, digest, size, chunkSize, in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SeekRead provides a mock function with given fields: ctx, name, start
func (_m *Storage) SeekRead(ctx context.Context, name string, start int64) (io.ReadCloser, error) {
	ret := _m.Called(ctx, name, start)

	if len(ret) == 0 {
		panic("no return value specified for SeekRead")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) (io.ReadCloser, error)); ok {
		return rf(ctx, name, start)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) io.ReadCloser); ok {
		r0 = rf(ctx, name, start)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64) error); ok {
		r1 = rf(ctx, name, start)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
