// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	image "github.com/projecteru2/vmihub/client/image"
	mock "github.com/stretchr/testify/mock"

	types "github.com/projecteru2/vmihub/client/types"
)

// API is an autogenerated mock type for the API type
type API struct {
	mock.Mock
}

// GetInfo provides a mock function with given fields: ctx, imgFullname
func (_m *API) GetInfo(ctx context.Context, imgFullname string) (*types.Image, error) {
	ret := _m.Called(ctx, imgFullname)

	if len(ret) == 0 {
		panic("no return value specified for GetInfo")
	}

	var r0 *types.Image
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.Image, error)); ok {
		return rf(ctx, imgFullname)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.Image); ok {
		r0 = rf(ctx, imgFullname)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Image)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, imgFullname)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListImages provides a mock function with given fields: ctx, user, pageN, pageSize
func (_m *API) ListImages(ctx context.Context, user string, pageN int, pageSize int) ([]*types.Image, int, error) {
	ret := _m.Called(ctx, user, pageN, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for ListImages")
	}

	var r0 []*types.Image
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]*types.Image, int, error)); ok {
		return rf(ctx, user, pageN, pageSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []*types.Image); ok {
		r0 = rf(ctx, user, pageN, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Image)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) int); ok {
		r1 = rf(ctx, user, pageN, pageSize)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, int, int) error); ok {
		r2 = rf(ctx, user, pageN, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListLocalImages provides a mock function with given fields:
func (_m *API) ListLocalImages() ([]*types.Image, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListLocalImages")
	}

	var r0 []*types.Image
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*types.Image, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*types.Image); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Image)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewImage provides a mock function with given fields: imgName
func (_m *API) NewImage(imgName string) (*types.Image, error) {
	ret := _m.Called(imgName)

	if len(ret) == 0 {
		panic("no return value specified for NewImage")
	}

	var r0 *types.Image
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*types.Image, error)); ok {
		return rf(imgName)
	}
	if rf, ok := ret.Get(0).(func(string) *types.Image); ok {
		r0 = rf(imgName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Image)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(imgName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Pull provides a mock function with given fields: ctx, imgName, policy
func (_m *API) Pull(ctx context.Context, imgName string, policy image.PullPolicy) (*types.Image, error) {
	ret := _m.Called(ctx, imgName, policy)

	if len(ret) == 0 {
		panic("no return value specified for Pull")
	}

	var r0 *types.Image
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, image.PullPolicy) (*types.Image, error)); ok {
		return rf(ctx, imgName, policy)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, image.PullPolicy) *types.Image); ok {
		r0 = rf(ctx, imgName, policy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Image)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, image.PullPolicy) error); ok {
		r1 = rf(ctx, imgName, policy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Push provides a mock function with given fields: ctx, img, force
func (_m *API) Push(ctx context.Context, img *types.Image, force bool) error {
	ret := _m.Called(ctx, img, force)

	if len(ret) == 0 {
		panic("no return value specified for Push")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Image, bool) error); ok {
		r0 = rf(ctx, img, force)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveImage provides a mock function with given fields: ctx, img
func (_m *API) RemoveImage(ctx context.Context, img *types.Image) error {
	ret := _m.Called(ctx, img)

	if len(ret) == 0 {
		panic("no return value specified for RemoveImage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Image) error); ok {
		r0 = rf(ctx, img)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveLocalImage provides a mock function with given fields: ctx, img
func (_m *API) RemoveLocalImage(ctx context.Context, img *types.Image) error {
	ret := _m.Called(ctx, img)

	if len(ret) == 0 {
		panic("no return value specified for RemoveLocalImage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Image) error); ok {
		r0 = rf(ctx, img)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAPI creates a new instance of API. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *API {
	mock := &API{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
